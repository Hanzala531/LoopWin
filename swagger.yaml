openapi: 3.0.3
info:
  title: LoopWin Giveaway System API
  description: |
    A robust API for managing giveaways, participants, and winners with full administrative control.
    This API provides comprehensive functionality for:
    - User authentication and management
    - Product catalog management
    - Purchase processing and tracking
    - Giveaway creation and management
    - Automated draw systems
    - Winner management and tracking
  version: 1.0.0
  contact:
    name: LoopWin API Support
    email: support@loopwin.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4000/api/v1
    description: Development server
  - url: https://loopwin-api.vercel.app/api/v1
    description: Production server

security:
  - BearerAuth: []

tags:
  - name: Public Endpoints
    description: Publicly accessible endpoints without authentication
  - name: Authentication
    description: User authentication and authorization
  - name: User Management
    description: User registration, profile management, and admin operations
  - name: Product Management
    description: Product catalog management and operations
  - name: Purchase Management
    description: Purchase processing, payment tracking, and order management
  - name: Giveaway Management
    description: Giveaway creation, management, and lifecycle operations
  - name: Draw & Winner Management
    description: Draw execution and winner management operations
  - name: Admin Statistics
    description: Administrative statistics and analytics endpoints

paths:
  # ==================== HEALTH CHECK ====================
  /:
    get:
      tags:
        - Public Endpoints
      summary: API Health Check
      description: Check if the API is running and get basic information
      security: []
      responses:
        '200':
          description: API is running successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 200
                data:
                  timestamp: "2025-08-07T10:00:00.000Z"
                  environment: "development"
                  version: "1.0.0"
                  availableEndpoints:
                    - "/api/v1/users"
                    - "/api/v1/products"
                    - "/api/v1/purchases"
                    - "/api/v1/giveaways"
                message: "Loop Win API is successfully running!"
                success: true
        '500':
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      tags:
        - Public Endpoints
      summary: Server Health Check
      description: Simple health check endpoint for monitoring
      security: []
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 200
                data:
                  status: "OK"
                  timestamp: "2025-08-07T10:00:00.000Z"
                message: "Server is healthy"
                success: true
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== AUTHENTICATION ====================
  /users/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with phone and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              name: "John Doe"
              phone: "03001234567"
              password: "securePassword123"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 201
                data:
                  _id: "507f1f77bcf86cd799439011"
                  name: "John Doe"
                  phone: "03001234567"
                  status: "user"
                  createdAt: "2025-08-07T10:00:00.000Z"
                message: "User registered successfully"
                success: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return JWT tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              phone: "03001234567"
              password: "securePassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 200
                data:
                  user:
                    _id: "507f1f77bcf86cd799439011"
                    name: "John Doe"
                    phone: "03001234567"
                    status: "user"
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                message: "User logged in successfully"
                success: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Logout user and invalidate refresh token
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 200
                data: null
                message: "User logged out successfully"
                success: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== USER MANAGEMENT ====================
  /users:
    get:
      tags:
        - User Management
      summary: Get all users (Admin only)
      description: Retrieve a list of all users with pagination
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsersResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - User Management
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 200
                data:
                  _id: "507f1f77bcf86cd799439011"
                  name: "John Doe"
                  phone: "03001234567"
                  status: "user"
                  createdAt: "2025-08-07T10:00:00.000Z"
                message: "User retrieved successfully"
                success: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== PRODUCT MANAGEMENT ====================
  /products:
    get:
      tags:
        - Product Management
      summary: Get all products
      description: Retrieve all products with pagination and sorting
      security: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            default: "createdAt"
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductsResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/search:
    get:
      tags:
        - Product Management
      summary: Search products
      description: Search products by name, headline, or description
      security: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/{id}:
    get:
      tags:
        - Product Management
      summary: Get product by ID
      description: Retrieve a specific product by ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/add:
    post:
      tags:
        - Product Management
      summary: Create new product (Admin only)
      description: Create a new product with image upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Product Management
      summary: Update product (Admin only)
      description: Update an existing product with optional image upload
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID to update
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/{id}:
    get:
      tags:
        - Product Management
      summary: Get product by ID
      description: Retrieve a specific product by ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Product Management
      summary: Delete product (Admin only)
      description: Delete a product (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID to delete
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 200
                data: null
                message: "Product deleted successfully"
                success: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== PURCHASE MANAGEMENT ====================
  /purchases:
    post:
      tags:
        - Purchase Management
      summary: Create new purchase
      description: Create a new purchase (Buy Now functionality)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePurchaseRequest'
            example:
              productId: "507f1f77bcf86cd799439011"
      responses:
        '201':
          description: Purchase created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - Purchase Management
      summary: Get all purchases (Admin only)
      description: Retrieve all purchases with filters and pagination
      parameters:
        - name: status
          in: query
          description: Filter by payment approval status
          schema:
            type: string
            enum: [pending, in-progress, completed]
        - name: userPayment
          in: query
          description: Filter by user payment status
          schema:
            type: string
            enum: [pending, in-progress, payed]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Purchases retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPurchasesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /purchases/my:
    get:
      tags:
        - Purchase Management
      summary: Get my purchases
      description: Get current user's purchases
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: User purchases retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPurchasesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /purchases/{id}/upload-screenshot:
    patch:
      tags:
        - Purchase Management
      summary: Upload payment screenshot
      description: Upload payment screenshot for a purchase
      parameters:
        - name: id
          in: path
          required: true
          description: Purchase ID
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                paymentScreenshot:
                  type: string
                  format: binary
                  description: Payment screenshot image file
      responses:
        '200':
          description: Payment screenshot uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /purchases/{id}:
    get:
      tags:
        - Purchase Management
      summary: Get purchase by ID
      description: Get a specific purchase by ID
      parameters:
        - name: id
          in: path
          required: true
          description: Purchase ID
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Purchase retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /purchases/{id}/approve:
    patch:
      tags:
        - Purchase Management
      summary: Update payment approval (Admin only)
      description: Update the payment approval status of a purchase
      parameters:
        - name: id
          in: path
          required: true
          description: Purchase ID
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentApprovalRequest'
            example:
              paymentApproval: "completed"
              userPayment: "payed"
      responses:
        '200':
          description: Payment approval updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /purchases/admin/stats:
    get:
      tags:
        - Admin Statistics
      summary: Get purchase statistics (Admin only)
      description: Get comprehensive purchase statistics and analytics
      responses:
        '200':
          description: Purchase statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 200
                data:
                  totalPurchases: 156
                  completedPurchases: 89
                  pendingPurchases: 45
                  totalRevenue: 234500
                  monthlyStats:
                    - month: "2025-08"
                      purchases: 23
                      revenue: 45600
                  topProducts:
                    - productId: "507f1f77bcf86cd799439011"
                      name: "Premium Widget"
                      purchaseCount: 12
                      revenue: 30000
                message: "Purchase statistics retrieved successfully"
                success: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== GIVEAWAY MANAGEMENT ====================
  /giveaways/active:
    get:
      tags:
        - Public Endpoints
      summary: Get active giveaways
      description: Get currently active giveaways (public endpoint)
      security: []
      responses:
        '200':
          description: Active giveaways retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 200
                data:
                  - _id: "507f1f77bcf86cd799439011"
                    title: "Summer Mega Giveaway 2025"
                    description: "Win amazing prizes by participating in our summer giveaway!"
                    image: "https://res.cloudinary.com/loopwin/image/upload/v1234567890/giveaway.jpg"
                    prizes:
                      - name: "iPhone 15 Pro"
                        description: "Latest iPhone 15 Pro 256GB"
                        value: 120000
                        quantity: 2
                        image: "https://example.com/iphone.jpg"
                    status: "active"
                    startDate: "2025-08-10T00:00:00.000Z"
                    endDate: "2025-08-31T23:59:59.000Z"
                    drawDate: "2025-09-01T10:00:00.000Z"
                message: "Active giveaways retrieved successfully"
                success: true
        '500':
          $ref: '#/components/responses/InternalServerError'

  /giveaways/create:
    post:
      tags:
        - Giveaway Management
      summary: Create new giveaway (Admin only)
      description: Create a new giveaway with prizes and eligibility criteria
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateGiveawayRequest'
      responses:
        '201':
          description: Giveaway created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 201
                data:
                  _id: "507f1f77bcf86cd799439011"
                  title: "Summer Mega Giveaway 2025"
                  description: "Win amazing prizes by participating in our summer giveaway!"
                  image: "https://res.cloudinary.com/loopwin/image/upload/v1234567890/giveaway.jpg"
                  createdBy:
                    _id: "507f1f77bcf86cd799439012"
                    name: "Admin User"
                    phone: "03009876543"
                  prizes:
                    - name: "iPhone 15 Pro"
                      description: "Latest iPhone 15 Pro 256GB"
                      value: 120000
                      quantity: 2
                      image: "https://example.com/iphone.jpg"
                  eligibilityCriteria:
                    minPurchases: 2
                    minAmountSpent: 5000
                    purchaseStartDate: "2025-01-01T00:00:00.000Z"
                    purchaseEndDate: "2025-08-31T23:59:59.000Z"
                  status: "draft"
                  startDate: "2025-08-10T00:00:00.000Z"
                  endDate: "2025-08-31T23:59:59.000Z"
                  drawDate: "2025-09-01T10:00:00.000Z"
                  drawCompleted: false
                  createdAt: "2025-08-07T10:00:00.000Z"
                  updatedAt: "2025-08-07T10:00:00.000Z"
                message: "Giveaway created successfully"
                success: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /giveaways:
    get:
      tags:
        - Giveaway Management
      summary: Get all giveaways (Admin only)
      description: Retrieve all giveaways with filters and pagination
      parameters:
        - name: status
          in: query
          description: Filter by giveaway status
          schema:
            type: string
            enum: [draft, active, completed, cancelled]
        - name: active
          in: query
          description: Filter for currently active giveaways
          schema:
            type: boolean
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of giveaways per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            default: "createdAt"
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
      responses:
        '200':
          description: Giveaways retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGiveawaysResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /giveaways/{giveawayId}:
    get:
      tags:
        - Giveaway Management
      summary: Get giveaway by ID (Admin only)
      description: Retrieve a specific giveaway by ID
      parameters:
        - name: giveawayId
          in: path
          required: true
          description: Giveaway ID
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Giveaway retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Giveaway Management
      summary: Delete giveaway (Admin only)
      description: Delete a giveaway (only if draw hasn't been completed)
      parameters:
        - name: giveawayId
          in: path
          required: true
          description: Giveaway ID
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Giveaway deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 200
                data: null
                message: "Giveaway deleted successfully"
                success: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /giveaways/{giveawayId}/status:
    patch:
      tags:
        - Giveaway Management
      summary: Update giveaway status (Admin only)
      description: Update the status of a giveaway
      parameters:
        - name: giveawayId
          in: path
          required: true
          description: Giveaway ID
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGiveawayStatusRequest'
            example:
              status: "active"
      responses:
        '200':
          description: Giveaway status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== DRAW & WINNER MANAGEMENT ====================
  /giveaways/{giveawayId}/draw:
    post:
      tags:
        - Draw & Winner Management
      summary: Run giveaway draw (Admin only)
      description: Execute the random draw for a giveaway and select winners
      parameters:
        - name: giveawayId
          in: path
          required: true
          description: Giveaway ID
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Draw completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 200
                data:
                  giveaway:
                    _id: "507f1f77bcf86cd799439011"
                    title: "Summer Mega Giveaway 2025"
                    status: "completed"
                    drawCompleted: true
                  winners:
                    - _id: "507f1f77bcf86cd799439013"
                      giveawayId: "507f1f77bcf86cd799439011"
                      userId:
                        _id: "507f1f77bcf86cd799439014"
                        name: "Winner Name"
                        phone: "03001234567"
                      prizeWon:
                        name: "iPhone 15 Pro"
                        description: "Latest iPhone 15 Pro 256GB"
                        value: 120000
                      wonAt: "2025-09-01T10:30:00.000Z"
                      deliveryStatus: "pending"
                      contactInfo:
                        phone: "03001234567"
                  totalWinners: 3
                  totalEligibleParticipants: 50
                message: "Draw completed successfully"
                success: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /giveaways/{giveawayId}/winners:
    get:
      tags:
        - Draw & Winner Management
      summary: Get giveaway winners (Admin only)
      description: Retrieve winners for a specific giveaway
      parameters:
        - name: giveawayId
          in: path
          required: true
          description: Giveaway ID
          schema:
            type: string
            format: objectid
        - name: status
          in: query
          description: Filter by delivery status
          schema:
            type: string
            enum: [pending, contacted, shipped, delivered]
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of winners per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            default: "wonAt"
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
      responses:
        '200':
          description: Winners retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWinnersResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /giveaways/winners/{winnerId}:
    patch:
      tags:
        - Draw & Winner Management
      summary: Update winner (Admin only)
      description: Update winner status, contact info, or notes
      parameters:
        - name: winnerId
          in: path
          required: true
          description: Winner ID
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWinnerRequest'
            example:
              deliveryStatus: "contacted"
              contactInfo:
                phone: "03001234567"
                email: "winner@example.com"
                address: "123 Main St, City, Country"
              notes: "Winner contacted via phone on 2025-08-07"
      responses:
        '200':
          description: Winner updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /giveaways/winners/{winnerId}/replace:
    post:
      tags:
        - Draw & Winner Management
      summary: Replace winner (Admin only)
      description: Replace a winner with a new random selection from eligible participants
      parameters:
        - name: winnerId
          in: path
          required: true
          description: Winner ID to replace
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Winner replaced successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusCode: 200
                data:
                  oldWinner:
                    name: "Old Winner Name"
                    phone: "old_winner_phone"
                    prizeWon:
                      name: "iPhone 15 Pro"
                      description: "Latest iPhone 15 Pro 256GB"
                      value: 120000
                  newWinner:
                    _id: "507f1f77bcf86cd799439015"
                    userId:
                      _id: "507f1f77bcf86cd799439016"
                      name: "New Winner Name"
                      phone: "03009876543"
                    prizeWon:
                      name: "iPhone 15 Pro"
                      description: "Latest iPhone 15 Pro 256GB"
                      value: 120000
                    wonAt: "2025-08-07T15:30:00.000Z"
                    deliveryStatus: "pending"
                message: "Winner replaced successfully"
                success: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /giveaways/winners/{winnerId}/prize:
    patch:
      tags:
        - Draw & Winner Management
      summary: Update winner prize (Admin only)
      description: Change the prize won by a winner
      parameters:
        - name: winnerId
          in: path
          required: true
          description: Winner ID
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWinnerPrizeRequest'
            example:
              prizeWon:
                name: "Samsung Galaxy S24"
                description: "Samsung Galaxy S24 Ultra 512GB"
                value: 180000
                image: "https://example.com/galaxy.jpg"
      responses:
        '200':
          description: Winner prize updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    # ==================== COMMON SCHEMAS ====================
    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
          example: 200
        data:
          type: object
          description: Response data (can be null)
          nullable: true
        message:
          type: string
          description: Response message
          example: "Operation completed successfully"
        success:
          type: boolean
          description: Whether the operation was successful
          example: true
      required:
        - statusCode
        - message
        - success

    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
          example: 400
        data:
          type: object
          nullable: true
          example: null
        message:
          type: string
          description: Error message
          example: "Validation failed"
        success:
          type: boolean
          description: Always false for errors
          example: false
      required:
        - statusCode
        - message
        - success

    PaginationInfo:
      type: object
      properties:
        currentPage:
          type: integer
          description: Current page number
          example: 1
        totalPages:
          type: integer
          description: Total number of pages
          example: 10
        totalItems:
          type: integer
          description: Total number of items
          example: 95
        hasNext:
          type: boolean
          description: Whether there is a next page
          example: true
        hasPrev:
          type: boolean
          description: Whether there is a previous page
          example: false
      required:
        - currentPage
        - totalPages
        - totalItems
        - hasNext
        - hasPrev

    # ==================== USER SCHEMAS ====================
    User:
      type: object
      properties:
        _id:
          type: string
          format: objectid
          description: User ID
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          description: User's full name
          example: "John Doe"
        phone:
          type: string
          description: User's phone number
          example: "03001234567"
        status:
          type: string
          enum: [user, admin]
          description: User role
          example: "user"
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2025-08-07T10:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-08-07T10:00:00.000Z"
      required:
        - _id
        - name
        - phone
        - status
        - createdAt
        - updatedAt

    RegisterRequest:
      type: object
      properties:
        name:
          type: string
          description: User's full name
          example: "John Doe"
        phone:
          type: string
          description: User's phone number (unique)
          example: "03001234567"
        password:
          type: string
          description: User's password
          example: "securePassword123"
      required:
        - name
        - phone
        - password

    LoginRequest:
      type: object
      properties:
        phone:
          type: string
          description: User's phone number
          example: "03001234567"
        password:
          type: string
          description: User's password
          example: "securePassword123"
      required:
        - phone
        - password

    PaginatedUsersResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            pagination:
              $ref: '#/components/schemas/PaginationInfo'
        message:
          type: string
          example: "Users retrieved successfully"
        success:
          type: boolean
          example: true

    # ==================== PRODUCT SCHEMAS ====================
    Product:
      type: object
      properties:
        _id:
          type: string
          format: objectid
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          description: Product name
          example: "Premium Widget"
        headline:
          type: string
          description: Product headline
          example: "The best widget you'll ever use"
        description:
          type: string
          description: Product description
          example: "A detailed description of the premium widget..."
        picture:
          type: string
          description: Product image URL
          example: "https://res.cloudinary.com/loopwin/image/upload/v1234567890/product.jpg"
        price:
          type: number
          description: Product price
          example: 2500
        productLink:
          type: string
          description: External product link
          example: "https://example.com/product"
        createdBy:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
          example: "2025-08-07T10:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-08-07T10:00:00.000Z"

    CreateProductRequest:
      type: object
      properties:
        name:
          type: string
          description: Product name
        headline:
          type: string
          description: Product headline
        description:
          type: string
          description: Product description
        price:
          type: number
          description: Product price
        productLink:
          type: string
          description: External product link
        picture:
          type: string
          format: binary
          description: Product image file
      required:
        - name
        - headline
        - description
        - price
        - productLink
        - picture

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          description: Product name
        headline:
          type: string
          description: Product headline
        description:
          type: string
          description: Product description
        price:
          type: number
          description: Product price
        productLink:
          type: string
          description: External product link
        picture:
          type: string
          format: binary
          description: Product image file (optional for updates)
      required:
        - name
        - headline
        - description
        - price
        - productLink

    PaginatedProductsResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        data:
          type: object
          properties:
            products:
              type: array
              items:
                $ref: '#/components/schemas/Product'
            pagination:
              $ref: '#/components/schemas/PaginationInfo'
        message:
          type: string
          example: "Products retrieved successfully"
        success:
          type: boolean
          example: true

    # ==================== PURCHASE SCHEMAS ====================
    Purchase:
      type: object
      properties:
        _id:
          type: string
          format: objectid
          example: "507f1f77bcf86cd799439011"
        purchaseId:
          type: integer
          description: Auto-generated purchase ID
          example: 1001
        userId:
          $ref: '#/components/schemas/User'
        productId:
          $ref: '#/components/schemas/Product'
        paymentScreenshot:
          type: string
          description: Payment screenshot URL
          example: "https://res.cloudinary.com/loopwin/image/upload/v1234567890/payment.jpg"
        userPayment:
          type: string
          enum: [pending, in-progress, payed]
          description: User payment status
          example: "payed"
        paymentApproval:
          type: string
          enum: [pending, in-progress, completed]
          description: Admin payment approval status
          example: "completed"
        createdAt:
          type: string
          format: date-time
          example: "2025-08-07T10:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-08-07T10:00:00.000Z"

    CreatePurchaseRequest:
      type: object
      properties:
        productId:
          type: string
          format: objectid
          description: Product ID to purchase
          example: "507f1f77bcf86cd799439011"
      required:
        - productId

    UpdatePaymentApprovalRequest:
      type: object
      properties:
        paymentApproval:
          type: string
          enum: [pending, in-progress, completed]
          description: New payment approval status
          example: "completed"
        userPayment:
          type: string
          enum: [pending, in-progress, payed]
          description: User payment status
          example: "payed"
      required:
        - paymentApproval

    PaginatedPurchasesResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        data:
          type: object
          properties:
            purchases:
              type: array
              items:
                $ref: '#/components/schemas/Purchase'
            pagination:
              $ref: '#/components/schemas/PaginationInfo'
        message:
          type: string
          example: "Purchases retrieved successfully"
        success:
          type: boolean
          example: true

    # ==================== GIVEAWAY SCHEMAS ====================
    Prize:
      type: object
      properties:
        name:
          type: string
          description: Prize name
          example: "iPhone 15 Pro"
        description:
          type: string
          description: Prize description
          example: "Latest iPhone 15 Pro 256GB"
        value:
          type: number
          description: Prize value in currency
          minimum: 0
          example: 120000
        quantity:
          type: integer
          description: Number of this prize available
          minimum: 1
          example: 2
        image:
          type: string
          description: Prize image URL
          example: "https://example.com/iphone.jpg"
      required:
        - name
        - description
        - value
        - quantity

    EligibilityCriteria:
      type: object
      properties:
        minPurchases:
          type: integer
          description: Minimum number of purchases required
          minimum: 0
          default: 1
          example: 2
        minAmountSpent:
          type: number
          description: Minimum amount spent required
          minimum: 0
          default: 0
          example: 5000
        purchaseStartDate:
          type: string
          format: date-time
          description: Start date for eligible purchases
          example: "2025-01-01T00:00:00.000Z"
        purchaseEndDate:
          type: string
          format: date-time
          description: End date for eligible purchases
          example: "2025-08-31T23:59:59.000Z"
        eligibleProducts:
          type: array
          items:
            type: string
            format: objectid
          description: Array of eligible product IDs
          example: ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439012"]

    Giveaway:
      type: object
      properties:
        _id:
          type: string
          format: objectid
          example: "507f1f77bcf86cd799439011"
        title:
          type: string
          description: Giveaway title
          example: "Summer Mega Giveaway 2025"
        description:
          type: string
          description: Giveaway description
          example: "Win amazing prizes by participating in our summer giveaway!"
        image:
          type: string
          description: Giveaway image URL
          example: "https://res.cloudinary.com/loopwin/image/upload/v1234567890/giveaway.jpg"
        createdBy:
          $ref: '#/components/schemas/User'
        prizes:
          type: array
          items:
            $ref: '#/components/schemas/Prize'
        eligibilityCriteria:
          $ref: '#/components/schemas/EligibilityCriteria'
        status:
          type: string
          enum: [draft, active, completed, cancelled]
          description: Giveaway status
          example: "active"
        startDate:
          type: string
          format: date-time
          description: Giveaway start date
          example: "2025-08-10T00:00:00.000Z"
        endDate:
          type: string
          format: date-time
          description: Giveaway end date
          example: "2025-08-31T23:59:59.000Z"
        drawDate:
          type: string
          format: date-time
          description: Draw execution date
          example: "2025-09-01T10:00:00.000Z"
        drawCompleted:
          type: boolean
          description: Whether the draw has been completed
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2025-08-07T10:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-08-07T10:00:00.000Z"

    CreateGiveawayRequest:
      type: object
      properties:
        title:
          type: string
          description: Giveaway title
        description:
          type: string
          description: Giveaway description
        image:
          type: string
          format: binary
          description: Giveaway image file (optional)
        prizes:
          type: string
          description: JSON string of prizes array
          example: '[{"name":"iPhone 15 Pro","description":"Latest iPhone","value":120000,"quantity":2}]'
        eligibilityCriteria:
          type: string
          description: JSON string of eligibility criteria
          example: '{"minPurchases":2,"minAmountSpent":5000}'
        startDate:
          type: string
          format: date-time
          description: Giveaway start date
        endDate:
          type: string
          format: date-time
          description: Giveaway end date
        drawDate:
          type: string
          format: date-time
          description: Draw execution date
        status:
          type: string
          enum: [draft, active, completed, cancelled]
          description: Initial giveaway status
          default: "draft"
      required:
        - title
        - description
        - prizes
        - startDate
        - endDate
        - drawDate

    UpdateGiveawayStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum: [draft, active, completed, cancelled]
          description: New giveaway status
          example: "active"
      required:
        - status

    PaginatedGiveawaysResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        data:
          type: object
          properties:
            giveaways:
              type: array
              items:
                $ref: '#/components/schemas/Giveaway'
            pagination:
              $ref: '#/components/schemas/PaginationInfo'
        message:
          type: string
          example: "Giveaways retrieved successfully"
        success:
          type: boolean
          example: true

    # ==================== WINNER SCHEMAS ====================
    Winner:
      type: object
      properties:
        _id:
          type: string
          format: objectid
          example: "507f1f77bcf86cd799439011"
        giveawayId:
          type: string
          format: objectid
          description: Reference to giveaway
          example: "507f1f77bcf86cd799439012"
        userId:
          $ref: '#/components/schemas/User'
        prizeWon:
          $ref: '#/components/schemas/Prize'
        wonAt:
          type: string
          format: date-time
          description: Timestamp when prize was won
          example: "2025-09-01T10:30:00.000Z"
        deliveryStatus:
          type: string
          enum: [pending, contacted, shipped, delivered]
          description: Prize delivery status
          example: "pending"
        contactInfo:
          type: object
          properties:
            phone:
              type: string
              example: "03001234567"
            email:
              type: string
              example: "winner@example.com"
            address:
              type: string
              example: "123 Main St, City, Country"
        notes:
          type: string
          description: Admin notes about the winner
          example: "Winner contacted via phone on 2025-08-07"
        createdAt:
          type: string
          format: date-time
          example: "2025-09-01T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-09-01T10:30:00.000Z"

    UpdateWinnerRequest:
      type: object
      properties:
        deliveryStatus:
          type: string
          enum: [pending, contacted, shipped, delivered]
          description: New delivery status
        contactInfo:
          type: object
          properties:
            phone:
              type: string
            email:
              type: string
            address:
              type: string
        notes:
          type: string
          description: Admin notes about the winner

    UpdateWinnerPrizeRequest:
      type: object
      properties:
        prizeWon:
          $ref: '#/components/schemas/Prize'
      required:
        - prizeWon

    PaginatedWinnersResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        data:
          type: object
          properties:
            winners:
              type: array
              items:
                $ref: '#/components/schemas/Winner'
            pagination:
              $ref: '#/components/schemas/PaginationInfo'
        message:
          type: string
          example: "Winners retrieved successfully"
        success:
          type: boolean
          example: true

    # ==================== STATISTICS SCHEMAS ====================
    PurchaseStatistics:
      type: object
      properties:
        totalPurchases:
          type: integer
          description: Total number of purchases
          example: 156
        completedPurchases:
          type: integer
          description: Number of completed purchases
          example: 89
        pendingPurchases:
          type: integer
          description: Number of pending purchases
          example: 45
        inProgressPurchases:
          type: integer
          description: Number of in-progress purchases
          example: 22
        totalRevenue:
          type: number
          description: Total revenue from completed purchases
          example: 234500
        monthlyStats:
          type: array
          items:
            type: object
            properties:
              month:
                type: string
                format: date
                example: "2025-08"
              purchases:
                type: integer
                example: 23
              revenue:
                type: number
                example: 45600
        topProducts:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: objectid
                example: "507f1f77bcf86cd799439011"
              name:
                type: string
                example: "Premium Widget"
              purchaseCount:
                type: integer
                example: 12
              revenue:
                type: number
                example: 30000
        topUsers:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
                format: objectid
                example: "507f1f77bcf86cd799439011"
              name:
                type: string
                example: "John Doe"
              purchaseCount:
                type: integer
                example: 5
              totalSpent:
                type: number
                example: 12500

  responses:
    BadRequest:
      description: Bad request - Invalid input or validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            statusCode: 400
            data: null
            message: "Validation failed. Please check your input."
            success: false

    Unauthorized:
      description: Unauthorized - Authentication required or token invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            statusCode: 401
            data: null
            message: "Authentication required. Please provide a valid token."
            success: false

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            statusCode: 403
            data: null
            message: "Access denied. Admins only."
            success: false

    NotFound:
      description: Not found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            statusCode: 404
            data: null
            message: "Resource not found."
            success: false

    Conflict:
      description: Conflict - Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            statusCode: 409
            data: null
            message: "Resource already exists."
            success: false

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            statusCode: 500
            data: null
            message: "Internal server error. Please try again later."
            success: false
